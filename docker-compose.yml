services:
  backend-express-main:
    container_name: backend-express-main
    image: express-main-latest
    restart: always
    networks:
      - main-network
    build:
      context: ./backend/express-main
      dockerfile: ./Dockerfile
      target: base
    volumes:
      - ./backend/express-main/src:/home/node/app/src
      - ./backend/express-main/nodemon.json:/home/node/app/nodemon.json
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - /.env
    ports:
      - '8000:8000'
    command: npm run dev

  frontend-react-main:
    container_name: frontend-react-main
    image: react-main-latest
    restart: always
    networks:
      - main-network
    build:
      context: ./frontend/react-main
      dockerfile: ./Dockerfile
      target: dev
    volumes:
      - /usr/src/app/node_modules
      - ./frontend/react-main:/usr/src/app
    env_file:
      - /.env
    environment:
      WATCHPACK_POLLING: "true"
    expose:
      - '3000'
    ports:
      - '3000:3000'
    
  backend-express-session:
    image: express-session-latest
    networks:
      - main-network
    build:
      context: ./backend/express-session
      dockerfile: ./Dockerfile
    volumes:
      - ./backend/express-session/src:/usr/src/app/src

  mongodb:
    container_name: mongodb
    image: mongo
    restart: always
    networks:
      - main-network
    ports:
      - 27017:27017
    volumes:
      - db-data:/data/db
    env_file:
      - /.env

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    networks:
      - main-network
    ports:
      - 8081:8081
    env_file:
      - /.env

volumes:
  db-data:
    driver: local

networks:
  main-network:
    name: master-thesis_main-network
    driver: bridge