services:

  #node-docker:
   # image: node-docker
    #build: 
     # context: ./backend/test-env
      #dockerfile: ./Dockerfile

  backend-express-main:
    container_name: backend-express-main
    image: express-main
    restart: always
    networks:
      - main-network
    build:
      context: ./backend/express-main
      dockerfile: ./Dockerfile
      target: base
    volumes:
      - ./backend/express-main/src:/home/node/app/src
      - ./backend/express-main/nodemon.json:/home/node/app/nodemon.json
      - /var/run/docker.sock:/var/run/docker.sock
      - user-code:/home/node/user-code
    env_file:
      - /.env
    expose:
      - '8000'
    ports:
      - '8000:8000'
    command: npm run dev

  frontend-react-main:
    container_name: frontend-react-main
    image: react-main
    restart: always
    networks:
      - main-network
    build:
      context: ./frontend/react-main
      dockerfile: ./Dockerfile
    volumes:
      - /usr/src/app/node_modules
      - ./frontend/react-main:/usr/src/app
    env_file:
      - /.env
    environment:
      WATCHPACK_POLLING: "true"
    expose:
      - '3000'
    ports:
      - '3000:3000'
    
  frontend-react-sandbox:
    image: react-sandbox
    networks:
      - main-network
    build:
      context: ./frontend/react-sandbox
      dockerfile: ./Dockerfile
    volumes:
      - user-code:/usr/src/app/user-code
    #expose:
      # - '3000'
    #ports:
      # - '3000:3000'

  mongodb:
    image: mongo
    restart: always
    networks:
      - main-network
    ports:
      - 27017:27017
    volumes:
      - db-data:/data/db
    env_file:
      - /.env

  mongo-express:
    image: mongo-express
    restart: always
    networks:
      - main-network
    ports:
      - 8081:8081
    env_file:
      - /.env

volumes:
  user-code:
    driver: local
  db-data:
    driver: local

networks:
  main-network:
    name: master-thesis_main-network
    driver: bridge