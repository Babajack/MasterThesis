services:
  backend-express-main:
    container_name: backend-express-main
    image: babajack/master_thesis:express-main-latest
    restart: always
    networks:
      - main-network
    build:
      context: ./backend/express-main
      dockerfile: ./Dockerfile
      target: base
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./production.env
    ports:
      - '8000:8000'
    command: npm run start

  frontend-react-main:
    container_name: frontend-react-main
    image: babajack/master_thesis:react-main-latest
    restart: always
    networks:
      - main-network
    build:
      context: ./frontend/react-main
      dockerfile: ./Dockerfile
      target: prod
    env_file:
      - ./production.env
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./frontend/react-main/nginx/:/etc/nginx/conf.d/:ro
      - ./certbot/www:/var/www/certbot/:ro
    
  backend-express-session:
    image: babajack/master_thesis:express-session-latest
    networks:
      - main-network
    build:
      context: ./backend/express-session
      dockerfile: ./Dockerfile

  mongodb:
    container_name: mongodb
    image: mongo
    restart: always
    networks:
      - main-network
    ports:
      - 27017:27017
    volumes:
      - db-data:/data/db
    env_file:
      - ./production.env

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    networks:
      - main-network
    ports:
      - 8081:8081
    env_file:
      - ./production.env

  certbot:
    image: certbot/certbot:latest
    volumes:
      - /certbot/www/:/var/www/certbot/:rw
      - /certbot/conf/:/etc/letsencrypt/:rw

volumes:
  db-data:
    driver: local

networks:
  main-network:
    name: master-thesis_main-network
    driver: bridge